11月1日
内容：动态内存管理
一.动态内存开辟
栈区：局部变量，函数的形参
堆区：动态内存分配，malloc，calloc，realloc，free
静态区：全局变量，静态变量

二.函数：
1.void* malloc(size_t size)
功能：开辟内存块

例如：（必须要检测返回值的有效性，因为可能会是空指针）
int main(void)
{
	int* p = (int*)malloc(100);
	if (p == NULL)
	{
		perror("malloc");
	}
	else
	{
		int i = 0;
		for (i=0;i < 100/4;i++)
		{
			p[i] = i;  //p[i]和*(p+i)是等价的
		}
	}
	return 0;
}

2.当内存不在使用时，要进行回收或者释放。（使用free函数）
void* free(要释放内存地址的起始值)

例如：
free(p); //p是上一步中开辟的内存。
p = NULL;

上述两步要放在一起使用。

3.calloc
void* calloc(size_t num, size_t size)//num：元素的个数；size：每个元素的大小
开辟一个数组并将其每个元素置为0

int* p = (int*)calloc(10,sizeof(int))
if (p == NULL)
	{
		perror("malloc");
		return 0;
	}
	
3.realloc
void* relloc(void* ptr,size_t size)//ptr是要调整的内存地址；size是新的大小；返回值为新的地址的起始地址。

realloc调整空间存在两种情况：
（1）在原空间后面有足够大的空间可供拓展；
（2）原空间后边没有足够的空间，则在堆区的其他地方找到能够满足新空间的地方；

也需要检测返回值是否为空指针。

三.常见错误
1.可能会对空指针进行解引用操作；（开辟空间后，一定要判断返回的指针是否为NULL）
2.对动态开辟的内存进行越界访问；
3.对非动态开辟内存的释放；
4.使用free释放动态开辟内存的一部分；
5.对同一块动态内存多次释放；（如何避免：每次释放完必须置为NULL）；
6.动态开辟内存忘记释放（会造成内存泄漏）。



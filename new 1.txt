//冒泡排序：

//整形排序
void bubble_sort(int arr[], int sz)
{
	int i,j,tmp;
	int flag=1;
	for (i = 0; i < sz-1; i++)
	{
		flag = 1;
		for (j = 0;j < sz-i-1;j++)
		{
			if (arr[j] > arr[j+1])
			{
				tmp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = tmp;
				flag = 0;
			}
			if (1 == flag)
			{
				break;
			}
		}
	}
}

int com_int(const void *e1,const void *e2)
{
	return *(int*)e1-*(int*)e2;
}

//结构体
struct S
{
	char name[20];
	int age;
};

//qsor 排序
//整型排序
void test1()
{

}

int cmp_stu_by_age(const void *e1,const void *e2)
{
	return ((struct S*)e1)->age - ((struct S*)e2)->age;
}

int cmp_stu_by_name(const void *e1,const void *e2)
{
	return strcmp(((struct S*)e1)->name , ((struct S*)e2)->name);
}

//结构体排序
void test2()
{
	struct S arr[]={{"zhangsan",20},{"lisi",40},{"wangwu",5}};
	int sz = sizeof(arr[]) / sizeof(arr[0]);
	qsor(arr, sz, sizeof(arr[0]), cmp_stu_by_age);
}



void _Swap(char* buf1, char* buf2, int width)
{
	int i;
	char tmp;
	for (i = 0; i < width; i++)
	{
		tmp = *(buf1+i);
		*(buf1+i) = *(buf2+i);
		*(buf2+i) = tmp;
	}
}
//实现任意类型排序的冒泡排序
void bubble_sort(void *base, int sz, int width, int(*cmp)(const void *e1,const void *e2))
{
	int i,j,k;
	int flag=1;
	char tmp;
	for (i = 0; (i < sz-1) && flag; i++)
	{
		flag = 0;
		for (j = 0;j < sz-i-1;j++)
		{
			if (cmp((char *)base+j*width, (char *)base+(j+1)*width) > 0)
			{
/* 				for (k=0; k<width; k++)
				{
					tmp = *((char *)base+j*width+k);
					*((char *)base+j*width+k) = *((char *)base+(j+1)*width+(k+1));
					*((char *)base+(j+1)*width+(k+1))=tmp;
				} */
				_Swap((char *)base+j*width, (char *)base+(j+1)*width,width);
				flag = 1;
			}
		}
	}
}